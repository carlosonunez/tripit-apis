---
plugins:
  - serverless-domain-manager

service:
  name: tripit-apis

frameworkVersion: '>=1.0.0'

provider:
  name: aws
  runtime: python3.6
  region: ${env:AWS_REGION, 'us-east-2'}
  memorySize: 128
  deploymentBucket:
    name: ${env:SERVERLESS_BUCKET_NAME}-${env:ENVIRONMENT}
  deploymentPrefix: serverless
  apiKeys:
    - ${self:custom.keyName.${opt:stage, self:provider.stage}}
  tracing:
    apiGateway: true

package:
  include:
    - tripit/**
    - vendor/**
  exclude:
    - scripts/**
    - secrets/**
    - infra/**
    - docker-compose.*
    - .terraform/**
    - spec/**
    - .env*

functions:
  auth:
    handler: bin/tripit.begin_authentication
    description: Function that directs the user to start the TripIt OAuth flow.
    timeout: 30
    environment:
      GEM_PATH: vendor/bundle/ruby/2.5.0
      TRIPIT_APP_CLIENT_ID: ${env:TRIPIT_APP_CLIENT_ID}
      TRIPIT_APP_CLIENT_SECRET: ${env:TRIPIT_APP_CLIENT_SECRET}
      APP_AWS_ACCESS_KEY_ID: ${file(./secrets/app_account_ak)}
      APP_AWS_SECRET_ACCESS_KEY: ${file(./secrets/app_account_sk)}
      ENVIRONMENT: ${env:ENVIRONMENT}
    events:
      - http:
          path: auth
          method: get
          private: true
  callback:
    handler: bin/tripit.handle_callback
    description: Function that receives TripIt OAuth callbacks.
    timeout: 30
    environment:
      GEM_PATH: vendor/bundle/ruby/2.5.0
      TRIPIT_APP_CLIENT_ID: ${env:TRIPIT_APP_CLIENT_ID}
      TRIPIT_APP_CLIENT_SECRET: ${env:TRIPIT_APP_CLIENT_SECRET}
      APP_AWS_ACCESS_KEY_ID: ${file(./secrets/app_account_ak)}
      APP_AWS_SECRET_ACCESS_KEY: ${file(./secrets/app_account_sk)}
      ENVIRONMENT: ${env:ENVIRONMENT}
    events:
      - http:
          path: callback
          method: get
  token:
    handler: bin/tripit.token
    description: Retrieves tokens for authenticated users.
    timeout: 30
    environment:
      GEM_PATH: vendor/bundle/ruby/2.5.0
      APP_AWS_ACCESS_KEY_ID: ${file(./secrets/app_account_ak)}
      APP_AWS_SECRET_ACCESS_KEY: ${file(./secrets/app_account_sk)}
      TRIPIT_APP_CLIENT_ID: ${env:TRIPIT_APP_CLIENT_ID}
      TRIPIT_APP_CLIENT_SECRET: ${env:TRIPIT_APP_CLIENT_SECRET}
      ENVIRONMENT: ${env:ENVIRONMENT}
    events:
      - http:
          path: token
          method: get
          private: true
  trips:
    handler: bin/tripit.trips
    description: Retrieves all trips associated with a TripIt account.
    timeout: 30
    environment:
      GEM_PATH: vendor/bundle/ruby/2.5.0
      APP_AWS_ACCESS_KEY_ID: ${file(./secrets/app_account_ak)}
      APP_AWS_SECRET_ACCESS_KEY: ${file(./secrets/app_account_sk)}
      TRIPIT_APP_CLIENT_ID: ${env:TRIPIT_APP_CLIENT_ID}
      TRIPIT_APP_CLIENT_SECRET: ${env:TRIPIT_APP_CLIENT_SECRET}
      ENVIRONMENT: ${env:ENVIRONMENT}
    events:
      - http:
          path: trips
          method: get
          private: true
  current_trip:
    handler: bin/tripit.current_trip
    description: Retrieves all trips associated with a TripIt account.
    timeout: 30
    environment:
      GEM_PATH: vendor/bundle/ruby/2.5.0
      APP_AWS_ACCESS_KEY_ID: ${file(./secrets/app_account_ak)}
      APP_AWS_SECRET_ACCESS_KEY: ${file(./secrets/app_account_sk)}
      TRIPIT_APP_CLIENT_ID: ${env:TRIPIT_APP_CLIENT_ID}
      TRIPIT_APP_CLIENT_SECRET: ${env:TRIPIT_APP_CLIENT_SECRET}
      TRIPIT_DEFAULT_ORIGIN_EGRESS_HOURS: ${env:TRIPIT_DEFAULT_ORIGIN_EGRESS_HOURS}
      TRIPIT_DEFAULT_DESTINATION_INGRESS_HOURS: ${env:TRIPIT_DEFAULT_DESTINATION_INGRESS_HOURS}
      ENVIRONMENT: ${env:ENVIRONMENT}
    events:
      - http:
          path: current_trip
          method: get
          private: true
  ping:
    handler: bin/tripit.ping
    description: Healthiness endpoint for APIs.
    timeout: 30
    environment:
      GEM_PATH: vendor/bundle/ruby/2.5.0
      ENVIRONMENT: ${env:ENVIRONMENT}
    events:
      - http:
          path: ping
          method: get

custom:
  keyName:
    develop: default-tripit-key-dev
    v1: default-tripit-key-prod
  enableCustomDomain:
    develop: false
    v1: true
  customDomain:
    stage: v1
    domainName: ${env:DOMAIN_PATH}.${env:DOMAIN_TLD}
    certificateArn: ${file(./secrets/certificate_arn)}
    basePath: 'v1'
    createRoute53Record: true
    enabled: ${self:custom.enableCustomDomain.${opt:stage, self:provider.stage}}
